<?php
namespace app\app\controller;

use app\common\model\Redis;
use app\model\DownloadChannel;
use app\model\NewsVisit;
use app\model\ShareVisit;
use think\Cache;
use think\Db;
use think\Request;

use app\common\MyController;

use app\model\VideoVisit;

 

use app\app\controller\BaseController;

class Datapre extends BaseController
{

    public function _initialize()
    {
        $request = Request::instance();
        $action = $request->action();

        if ($action!='channel_download')
        {
            parent::_initialize(); // TODO: Change the autogenerated stub
        }


    }

    /**
     * 视频访问统计
     * @param  模型，引用传递
     * @param  查询条件
     * @param int  每页查询条数
     * @return 返回
     */
    public function videoVisit(){

        $video_id = input("video_id");
        if(empty($video_id)){
            return out([],10001,"错误请求");
        }
        $video = Db::table('hs_new_video')->where(['id'=>$video_id])->find();
        if(empty($video)){
            return out([],10001,"error");
        }
        //更新视频播放数量
        Db::table('hs_new_video')->where(['id'=>$video_id])->update(['visit_count'=>['exp',"visit_count+1"],"play_count"=>['exp',"play_count+1"]]);

        $cacheKey = 'Vi_Video_'.$this->user_id.'_'.$video_id;
        $queueKey = 'queueVideoVisit';
        $time = time();
        $runJson = json_encode(['user_id' => $this->user_id,"video_id"=>$video_id,'time' => $time]);

        $redis = new Redis();
        $cacheNum = $redis->get($cacheKey);
        if($cacheNum && $cacheNum > 0){
            $redis->set($cacheKey,$cacheNum+1 ,36 * 3600);
        }else{
            $redis->set($cacheKey,1,36 * 3600);
            $redis->lpush($queueKey,$runJson);
        }

//        $VideoVisit = new VideoVisit();
//        $is_exists  = $VideoVisit->where(['user_id'=>$this->user_id,"video_id"=>$video_id])->whereTime('create_time', 'today')->value('id');
//
//        if(empty($is_exists)){
//            //添加
//            $VideoVisit->insert([
//                'user_id'=>$this->user_id,
//                'video_id'=>$video_id,
//                'create_time'=>time(),
//                'count'=>1,
//            ]);
//        }else{
//            //更新
//            $VideoVisit->where(['id'=>$is_exists])->update(['count'=>['exp',"count+1"],'create_time'=>time()]);
//        }


        return out([]);
    }

    /**
     * 新闻访问统计
     * @param  模型，引用传递
     * @param  查询条件
     * @param int  每页查询条数
     * @return 返回
     */
    public function newsVisit(){

        $newsId = input("news_id");
        if(empty($newsId)){
            return out([],10001,"错误请求");
        }

        $newsVisit = new NewsVisit();
        $is_exists  = $newsVisit->where(['user_id'=>$this->user_id,"news_id"=>$newsId])->whereTime('create_time', 'today')->value('id');

        if(empty($is_exists)){
            //添加
            $newsVisit->insert([
                'user_id'=>$this->user_id,
                'news_id'=>$newsId,
                'create_time'=>time(),
                'count'=>1,
            ]);
        }else{
            //更新
            $newsVisit->where(['id'=>$is_exists])->update(['count'=>['exp',"count+1"],'create_time'=>time()]);
        }

        \app\model\News::where(['id'=>$newsId])->update(['visit_count'=>['exp',"visit_count+1"]]);
        return out([]);
    }

    /**
     * 分享统计
     * @param  模型，引用传递
     * @param  查询条件
     * @param int  每页查询条数
     * @return 返回
     */
    public function shareVisit(){
        $activity_type = input("activity_type");
        $code = input("code","");
        $share_channel = input("share_channel");
        if(empty($code) || !in_array($code, [200,-1,-2])){
            return out("",10001,"错误请求");
        }
        if($share_channel=="" || !in_array($share_channel, [0,1,2,3])){
            return out("",10001,"错误请求");
        }
        if(empty($activity_type)){
            $activity_type = "no";
        }
        ShareVisit::visited_count($this->user_id,$activity_type,$code,$share_channel);
        return out([]);
    }

    /**
     * 渠道下载统计
     * @param int  每页查询条数
     */
    public function channel_download(){

        $channel = input("channel");
        if(empty($channel)){
            return out([],10001,"错误请求");
        }

        $ip =  $_SERVER['REMOTE_ADDR'];

        $downloadChannel = new DownloadChannel();

        //添加
        $downloadChannel->insert([
            'channel'=>$channel,
            'ip'=>$ip,
            'create_time'=>time(),
        ]);

        return out([]);
    }

}

